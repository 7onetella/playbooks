user www-data;
worker_processes auto;
worker_rlimit_nofile 40000;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
  worker_connections 8192;
}

http {
  log_format main '$remote_addr $host $remote_user [$time_local] '
                  '"$request" $status $body_bytes_sent '
                  '"$http_referer" "$http_user_agent" "$gzip_ratio"';  

# log_format json_analytics escape=json '{'
#             '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
#             '"connection": "$connection", ' # connection serial number
#             '"connection_requests": "$connection_requests", ' # number of requests made in connection
#             '"pid": "$pid", ' # process pid
#             '"request_id": "$request_id", ' # the unique request id
#             '"request_length": "$request_length", ' # request length (including headers and body)
#             '"remote_addr": "$remote_addr", ' # client IP
#             '"remote_user": "$remote_user", ' # client HTTP username
#             '"remote_port": "$remote_port", ' # client port
#             '"time_local": "$time_local", '
#             '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
#             '"request": "$request", ' # full path no arguments if the request
#             '"request_uri": "$request_uri", ' # full path and arguments if the request
#             '"args": "$args", ' # args
#             '"status": "$status", ' # response status code
#             '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
#             '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
#             '"http_referer": "$http_referer", ' # HTTP referer
#             '"http_user_agent": "$http_user_agent", ' # user agent
#             '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
#             '"http_host": "$http_host", ' # the request Host: header
#             '"server_name": "$server_name", ' # the name of the vhost serving the request
#             '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
#             '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
#             '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
#             '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
#             '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
#             '"upstream_response_length": "$upstream_response_length", ' # upstream response length
#             '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
#             '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
#             '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
#             '"scheme": "$scheme", ' # http or https
#             '"request_method": "$request_method", ' # request method
#             '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
#             '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
#             '"gzip_ratio": "$gzip_ratio", '
#             '"http_cf_ray": "$http_cf_ray"'
            # '"geoip_country_code": "$geoip_country_code"'
            # '}';

  error_log   /var/log/nginx/error.log;
  
  server_tokens off;

  server {
    listen 8080;
    server_name 127.0.0.1;
    access_log off;

    location / {
      stub_status on;
      allow 127.0.0.1;
      deny all;
    }
  }

  server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    access_log off;
    return 301 https://$host$request_uri;
  }  
  
  # map $ssl_server_name $target_backend {
  #   www.curiosityworks.org              http://192.168.69.101:80; 
  # }

  map $ssl_server_name $internal_target_backend {
    grafana.curiosityworks.org          http://192.168.69.130:3000;
    prometheus.curiosityworks.org       http://192.168.69.130:9090;
    filebrowser.curiosityworks.org      http://192.168.69.106:8080;
    plex.curiosityworks.org             http://192.168.69.105:32400;
  }

  # server {
  #   listen              192.168.69.100:443 ssl;
  #   server_name         *.curiosityworks.org;
  #   access_log          /var/log/nginx/access.log main;
  #   # access_log          /var/log/nginx/json_access.log json_analytics;
  #   ssl_protocols       TLSv1.2;
  #   ssl_certificate     /etc/letsencrypt/live/curiosityworks.org/fullchain.pem;
  #   ssl_certificate_key /etc/letsencrypt/live/curiosityworks.org/privkey.pem;

  #   # disable any limits to avoid HTTP 413 for large image uploads
  #   client_max_body_size 0;

  #   resolver 1.1.1.1;

  #   location / {
  #     proxy_pass                                  $target_backend;
  #     proxy_set_header  Host                      $http_host;   # required for docker client's sake
  #     proxy_set_header  X-Real-IP                 $remote_addr; # pass on real client's IP
  #     proxy_set_header  X-Forwarded-For           $proxy_add_x_forwarded_for;
  #     proxy_set_header  X-Forwarded-Proto         $scheme;
  #     proxy_read_timeout                          900s;
  #     proxy_set_header Upgrade                    $http_upgrade;
  #     proxy_set_header Connection                 "upgrade";
  #   }
  # }

  server {
    listen              192.168.69.100:443 ssl;
    server_name         www.curiosityworks.org docs.curiosityworks.org console.curiosityworks.org librespeed.curiosityworks.org vscode-*.curiosityworks.org;
    access_log          off;
    ssl_protocols       TLSv1.2;
    ssl_certificate     /etc/letsencrypt/live/curiosityworks.org/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/curiosityworks.org/privkey.pem;

    # disable any limits to avoid HTTP 413 for large image uploads
    client_max_body_size 0;

    resolver 1.1.1.1;

    gzip                on;
    gzip_vary           on;
    gzip_min_length     1000;
    gzip_proxied        any;
    gzip_types          text/plain text/css text/xml application/xml text/javascript application/x-javascript image/svg+xml;
    gzip_disable        "MSIE [1-6]\.";    

    location / {
      proxy_pass                                  http://192.168.69.150:80; # $internal_target_backend;
      proxy_set_header  Host                      $http_host;   # required for docker client's sake
      proxy_set_header  X-Real-IP                 $remote_addr; # pass on real client's IP
      proxy_set_header  X-Forwarded-For           $proxy_add_x_forwarded_for;
      proxy_set_header  X-Forwarded-Proto         $scheme;
      proxy_set_header  Sec-WebSocket-Extensions  $http_sec_websocket_extensions;
      proxy_set_header  Sec-WebSocket-Key         $http_sec_websocket_key;
      proxy_set_header  Sec-WebSocket-Version     $http_sec_websocket_version;      
      proxy_read_timeout                          900s;

      # Websockets
      proxy_http_version                          1.1;          # default is 1.0. this upgrade helps with goland ws issue
      proxy_set_header Upgrade                    $http_upgrade;
      proxy_set_header Connection                 "Upgrade";

      # Buffering off send to the client as soon as the data is received from Plex.
      proxy_redirect off;
      proxy_buffering off;

      # proxy_connect_timeout 1s;
      # proxy_ssl_verify                    off;   
      # proxy_ssl_server_name               on;
      # proxy_cache_bypass                  $http_upgrade;    
    }
  }  

}